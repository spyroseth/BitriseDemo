format_version: "8"
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: ios
app:
  envs:
  - BITRISE_PROJECT_PATH: BitriseDemo.xcodeproj
  - BITRISE_SCHEME: BitriseDemo
  - BITRISE_EXPORT_METHOD: app-store
  - BITRISE_DEPLOY_DIR: ./deploy_dir
  - DEPLOY_EMAIL: spyrospath@gmail.com
    opts:
      is_expand: false
trigger_map:
- push_branch: '*'
  workflow: built-testflight
- pull_request_source_branch: '*'
  workflow: primary
workflows:
  build:
    envs:
    - TEST_FILE_PATH: ./test-cases-devices.txt
      opts:
        is_expand: false
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@6: {}
    - cache-pull@2: {}
    - recreate-user-schemes@1:
        inputs:
        - project_path: $BITRISE_PROJECT_PATH
    - ios-auto-provision-appstoreconnect@2:
        inputs:
        - distribution_type: app-store
    - xcode-build-for-test@0:
        inputs:
        - verbose_log: "yes"
    - xcode-archive@3:
        inputs:
        - export_method: development
    - deploy-to-bitrise-io@1:
        inputs:
        - notify_email_list: $DEPLOY_EMAIL
    - script@1:
        inputs:
        - content: "#!/usr/bin/env bash\n# fail if any commands fails\nset -e\n# debug log\nset -x\n\n#!/bin/bash\n\n#echo $BITRISE_PERMANENT_DOWNLOAD_URL_MAP\n\nURL=\"https://api.bitrise.io/v0.1/apps/5f6f89ea196728a1/builds/3870cce5-4764-4518-98e2-2969f320dd1e/artifacts\"\nACCEPT=\"accept: application/json\"\nAUTHORIZATION=\"Authorization: tZwkniGPZjrirdW4327jem40Mme-cdTwaeEYU8ahbhUHEljrpTWj99Sf6NuYlcoQQy8Y-OK5Cig8FexjlzDreQ\"\n\nBUILD_ARTIFACTS=$(curl \"$URL\" -H \"$ACCEPT\" -H \"$AUTHORIZATION\" | jq '.data')\n\necho \"${BUILD_ARTIFACTS}\" | jq -c '.[]'\n\nHTML=\".html\"\n\nfor row in $(echo \"$BUILD_ARTIFACTS\" | jq -r '.[] | @base64'); do\n    _jq() {\n    \tDECODED_TITLE=$(echo ${row} | base64 --decode | jq -c '.title')\n    \tif grep -q \"$HTML\" <<< \"$DECODED_TITLE\"; then\n    \t\tARTIFACT_SLUG=$(echo ${row} | base64 --decode | jq -r '.slug')\n    \t\tARTIFACT_URL=\"$URL/$ARTIFACT_SLUG\"\n    \t\tEXPIRING_DOWNLOAD_URL=$(curl \"$ARTIFACT_URL\" -H \"$ACCEPT\" -H \"$AUTHORIZATION\" | jq '.data.expiring_download_url')\n                \n    \t\tenvman add --key TEST_RESULTS_URL --value \"${EXPIRING_DOWNLOAD_URL//\\\"}\"\n    \t\techo \"${EXPIRING_DOWNLOAD_URL//\\\"}\"\n  \t\tbreak\n\tfi\n    }\n\n   echo $(_jq)\ndone\n\n# or run a script from your repository, like:\n# bash ./path/to/script.sh\n# not just bash, e.g.:\n# ruby ./path/to/script.rbA"
    - script@1:
        inputs:
        - content: |
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            # Upload to BrowserStack
            echo "Uploading tests to BrowserStack..."

            # Step 1: Upload your app

            echo "Uploading BitriseDemo.ipa..."
            B_APP_URL=$(curl -u "spyrosspatharis_rtfg8c:4ghGJ5sC1KAhD3TpPwbR" -X POST "https://api-cloud.browserstack.com/app-automate/upload" -F "file=@./deploy_dir/BitriseDemo.ipa" | jq '.app_url')

            echo "Zipping test runner..."
            cd ./deploy_dir/Debug-iphoneos/
            zip --symlinks -r BitriseDemoUITests-Runner ./BitriseDemoUITests-Runner.app
            cp BitriseDemoUITests-Runner.zip ../../
            cd ../../

            # Step 2: Upload your test
            echo "Uploading test..."
            B_TEST_URL=$(curl -u "spyrosspatharis_rtfg8c:4ghGJ5sC1KAhD3TpPwbR" -X POST "https://api-cloud.browserstack.com/app-automate/xcuitest/v2/test-suite" -F "file=@./BitriseDemoUITests-Runner.zip" | jq '.test_suite_url')

            # Step 3: Execute XCUITest
            echo "Executing XCUITest..."
            curl -X POST "https://api-cloud.browserstack.com/app-automate/xcuitest/build" -d "{\"devices\": [\"iPhone 11 Pro Max-13.6\"], \"app\": $B_APP_URL, \"deviceLogs\" : \"true\", \"testSuite\": $B_TEST_URL}" -H "Content-Type: application/json" -u "spyrosspatharis_rtfg8c:4ghGJ5sC1KAhD3TpPwbR"
    - slack@3:
        is_always_run: false
        inputs:
        - channel: '#mobile_ci'
        - buttons: |
            View App|${BITRISE_APP_URL}
            View Build|${BITRISE_BUILD_URL}
            Install Page|${BITRISE_PUBLIC_INSTALL_PAGE_URL}
            View Test Results|${TEST_RESULTS_URL}
        - webhook_url: $SLACK_WEBHOOK_URL
    - cache-push@2:
        inputs:
        - is_debug_mode: "true"
        - cache_paths: ""
  built-testflight:
    envs:
    - TEST_FILE_PATH: ./test-cases-devices.txt
      opts:
        is_expand: false
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@6: {}
    - cache-pull@2: {}
    - recreate-user-schemes@1:
        inputs:
        - project_path: $BITRISE_PROJECT_PATH
    - ios-auto-provision-appstoreconnect@2:
        inputs:
        - distribution_type: app-store
    - xcode-build-for-test@0:
        inputs:
        - xcodebuild_options: -allowProvisioningUpdates
        - verbose_log: "yes"
    - virtual-device-testing-for-ios@0:
        inputs:
        - test_devices: iphone1,13.6,en,portrait
    - xcode-test@3:
        inputs:
        - simulator_os_version: "13.4"
        - simulator_device: iPhone 11
    - deploy-to-bitrise-io@2:
        inputs:
        - notify_email_list: $DEPLOY_EMAIL
    - slack@3:
        is_always_run: false
        inputs:
        - channel: '#mobile_ci'
        - buttons: |
            View App|${BITRISE_APP_URL}
            View Build|${BITRISE_BUILD_URL}
            Install Page|${BITRISE_PUBLIC_INSTALL_PAGE_URL}
            View Test Results|${TEST_RESULTS_URL}
        - webhook_url: $SLACK_WEBHOOK_URL
    - cache-push@2:
        inputs:
        - is_debug_mode: "true"
        - cache_paths: ""
  deploy:
    envs:
    - TEST_FILE_PATH: ./test-cases-devices.txt
      opts:
        is_expand: false
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@6: {}
    - cache-pull@2: {}
    - script@1:
        title: Do anything with Script step
    - recreate-user-schemes@1:
        inputs:
        - project_path: $BITRISE_PROJECT_PATH
    - ios-auto-provision-appstoreconnect@2:
        inputs:
        - api_issuer: 69a6de86-63f9-47e3-e053-5b8c7c11a4d1
        - distribution_type: app-store
    - xcode-test@3:
        inputs:
        - project_path: $BITRISE_PROJECT_PATH
        - simulator_device: iPhone 12
        - maximum_test_repetitions: "0"
        - scheme: $BITRISE_SCHEME
    - xcode-archive@3:
        inputs:
        - project_path: $BITRISE_PROJECT_PATH
        - scheme: $BITRISE_SCHEME
        - export_method: $BITRISE_EXPORT_METHOD
    - deploy-to-bitrise-io@1: {}
    - cache-push@2: {}
    - browserstack-upload@0: {}
    - xcuitestbrowserstack@2:
        inputs:
        - browserstack_username: $BROWSERSTACK_USERNAME
        - browserstack_password: $BROWSERSTACK_ACCESS_KEY
        - tests_file_path: $TEST_FILE_PATH
        - browserstack_app_url: $BROWSERSTACK_APP_URL
  primary:
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@6: {}
    - cache-pull@2: {}
    - script@1:
        title: Do anything with Script step
    - recreate-user-schemes@1:
        inputs:
        - project_path: $BITRISE_PROJECT_PATH
    - certificate-and-profile-installer@1: {}
    - xcode-test@3:
        inputs:
        - project_path: $BITRISE_PROJECT_PATH
        - scheme: $BITRISE_SCHEME
    - deploy-to-bitrise-io@2: {}
    - cache-push@2: {}
